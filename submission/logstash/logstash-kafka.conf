input {
    kafka {
        bootstrap_servers => "kafka:9092"
        topics => ["nyc_311_service_requests"]
        codec => "json"
    }
}

filter {
  date {
    match => [ "created_date", "ISO8601" ]
    target => "created_date"
  }

  mutate {
    convert => {
      "latitude" => "float"
      "longitude" => "float"
    }
    
    # Remove any existing `location` field to avoid format conflicts
    remove_field => [ "location" ]
  }

  # Use a Ruby filter to check if conversion was successful
  ruby {
    code => '
      def valid_float?(value)
        Float(value) rescue false
      end
      event.set("[valid_location]", false)
      if valid_float?(event.get("latitude")) && valid_float?(event.get("longitude"))
        event.set("[valid_location]", true)
      end
    '
  }

  # Conditionally add the location field if valid
  if [valid_location] {
    mutate {
      add_field => { "[location][lat]" => "%{latitude}" }
      add_field => { "[location][lon]" => "%{longitude}" }
    }
  }

  # Optional: Remove the temporary valid_location flag
  mutate {
    remove_field => [ "valid_location" ]
  }
}


output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "nyc_311_service_requests-%{+YYYY.MM.dd}"
    document_id => "%{unique_key}"
  }
}